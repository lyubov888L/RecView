Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   01/20/19 14:04:09
projx64.asm						     Page 1 - 1


				;ml64.exe

 00000000			DATA segment align(32)
 00000000 00000000		F76543210 real4 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0
	   3F800000
	   40000000
	   40400000
	   40800000
	   40A00000
	   40C00000
	   40E00000
 00000020 41000000		F88888888 real4 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
 00000040 00000000		F00000000 real4 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000060 00000000		F3210 real4 0.0, 1.0, 2.0, 3.0
	   3F800000
	   40000000
	   40400000
 00000070			DATA ends

 00000000			.code

 00000000			projx64 PROC
				;	mov r10, rcx ; the first arg = rcx
				;	mov r10, rdx ; the 2nd arg = rdx
				;	mov rax, r10 ; rax to return result

				;			for (int iy=iy0; iy<iy1; iy++) {
				;				const int ifpidx = iy * ixdimp;
				;				const float fyoff = iy * fsin + foffset;
				;				for (int ix=0; ix<ixdimp; ix++) {
				;					int ix0 = (int)(ix * fcos + fyoff);
				;					if (ix0 < 0) continue;
				;					if (ix0 >= ixdimpg) continue;
				;					ifp[ifpidx + ix] += ipgp[ix0];
				;				}
				;			}

				;local valiables
				;	local pmxcsr :dword
				;	local smxcsr :dword

				;store registers
 00000000  53				push rbx
 00000001  55				push rbp
 00000002  56				push rsi
 00000003  57				push rdi
 00000004  41/ 54			push r12
 00000006  41/ 55			push r13

				;get pointer to args
 00000008  48/ 8B F1			mov rsi, rcx	; arg #1

				;init params
				;	mov ixdimpg, [rsi + 24]
 0000000B  4C/ 8B 56 20			mov r10, [rsi + 32]	; ixdimp
 0000000F  4D/ 8B CA			mov r9, r10
 00000012  49/ C1 E1 02			shl r9, 2	; r9<==ixdimp * 4
				;	mov ifp, [rsi + 40]
				;	mov igp, [rsi + 48]
 00000016  4C/ 8B 66 40			mov r12, [rsi + 64]	;iy0
 0000001A  4C/ 8B 6E 48			mov r13, [rsi + 72]	;iy1

				;sse rounding mode RC=00B (MXCSR[14:13])
				;	stmxcsr smxcsr
				;	stmxcsr pmxcsr
				;	and pmxcsr, 0FFFF9FFFh
				;	ldmxcsr pmxcsr

				;jump to AVX routine
 0000001E  48/ 8B 46 38			mov rax, [rsi + 56]	; AVX flag
 00000022  48/ 83 E0 01			and rax, 000000001h
 00000026  0F 85 000000FA		jnz USEAVX

				;load valiables	
 0000002C  49/ 8B C5			mov rax, r13; iy = iy1
 0000002F  48/ FF C8			dec rax
 00000032  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000035  48/ F7 E9			imul rcx
 00000038  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * (iy1 - 1) * 4
 0000003C  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 00000040  48/ 8B F8			mov rdi, rax

 00000043  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000046  F3/ 0F 10 00			movss xmm0, real4 ptr [rax]
 0000004A  0F C6 C0 00			shufps xmm0, xmm0, 0
					
 0000004E  48/ 8B 46 08			mov rax, [rsi + 8]	; &fsin
 00000052  F3/ 0F 10 08			movss xmm1, real4 ptr [rax]
 00000056  0F C6 C9 00			shufps xmm1, xmm1, 0

 0000005A  48/ 8B 46 10			mov rax, [rsi + 16]	; &foffset
 0000005E  F3/ 0F 10 38			movss xmm7, real4 ptr [rax]
 00000062  0F C6 FF 00			shufps xmm7, xmm7, 0

 00000066  0F 28 35			movaps xmm6, F3210
	   00000060 R
					
				;start process
 0000006D  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000071  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000075  49/ 8B D5			mov rdx, r13	; iy<==iy1
 00000078  48/ FF CA			dec rdx
 0000007B  48/ C7 C0			mov rax, 0
	   00000000
 00000082			LOOPY:
 00000082  49/ 8B DA			mov rbx, r10	; ix<==ixdimp
 00000085  48/ FF CB			dec rbx
 00000088  F3/ 48/ 0F 2A DA		cvtsi2ss xmm3, rdx	; xmm3<==iy
 0000008D  0F C6 DB 00			shufps xmm3, xmm3, 0	; xmm3<==iy, iy, iy, iy
 00000091  0F 28 E9			movaps xmm5, xmm1	; xmm5<==fsin, fsin, fsin, fsin
 00000094  0F 59 EB			mulps xmm5, xmm3	; iy * fsin for each float
 00000097  0F 58 EF			addps xmm5, xmm7	; + foffset for each float
 0000009A			LOOPX:
 0000009A  F3/ 48/ 0F 2A D3		cvtsi2ss xmm2, rbx	; xmm2<==ix
 0000009F  0F C6 D2 00			shufps xmm2, xmm2, 0	; xmm2<==ix, ix, ix, ix
 000000A3  0F 5C D6			subps xmm2, xmm6	; xmm2<==ix-3, ix-2, ix-2, ix
 000000A6  0F 28 E0			movaps xmm4, xmm0	; xmm4<==fcos, fcos, fcos, fcos
 000000A9  0F 59 E2			mulps xmm4, xmm2	; (ix-n) * fcos
 000000AC  0F 58 E5			addps xmm4, xmm5	; (ix-n) * fcos + foffset
 000000AF  F3/ 0F 5B E4			cvttps2dq xmm4, xmm4	; xmm4 float*4 to integer32*4
 000000B3  66| 0F 7E E0			movd eax, xmm4	; lower 4 bytes to eax
				;	pextrd eax, xmm4, 0	; SSE4.1
 000000B7  3B C1			cmp eax, ecx	; ix<=>ixdimpg
 000000B9  73 06			jae LOOPXSKIP1	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000BB  8B 04 86			mov eax, [rsi + rax * 4]	; eax<==igp[ix * DBPT_GINTP]
 000000BE  01 04 9F			add [rdi + rbx * 4], eax	; ifp[ix] += eax
 000000C1			LOOPXSKIP1:
 000000C1  48/ FF CB			dec rbx	; ix--
 000000C4  7C 48			jl LOOPYEND	; ix < 0
 000000C6  66| 0F 73 DC			psrldq xmm4, 4	; shift right by 4 bytes (integer32)
	   04
 000000CB  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 1	; SSE4.1
 000000CF  3B C1			cmp eax, ecx; ixdimpg
 000000D1  73 06			jae LOOPXSKIP2	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000D3  8B 04 86			mov eax, [rsi + rax * 4]
 000000D6  01 04 9F			add [rdi + rbx * 4], eax
 000000D9			LOOPXSKIP2:
 000000D9  48/ FF CB			dec rbx	; ix--
 000000DC  7C 30			jl LOOPYEND	; ix < 0
 000000DE  66| 0F 73 DC			psrldq xmm4, 4
	   04
 000000E3  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 2	; SSE4.1
 000000E7  3B C1			cmp eax, ecx; ixdimpg
 000000E9  73 06			jae LOOPXSKIP3	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000EB  8B 04 86			mov eax, [rsi + rax * 4]
 000000EE  01 04 9F			add [rdi + rbx * 4], eax
 000000F1			LOOPXSKIP3:
 000000F1  48/ FF CB			dec rbx	; ix--
 000000F4  7C 18			jl LOOPYEND	; ix < 0
 000000F6  66| 0F 73 DC			psrldq xmm4, 4
	   04
 000000FB  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 3	; SSE4.1
 000000FF  3B C1			cmp eax, ecx; ixdimpg
 00000101  73 06			jae LOOPXEND	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 00000103  8B 04 86			mov eax, [rsi + rax * 4]
 00000106  01 04 9F			add [rdi + rbx * 4], eax
 00000109			LOOPXEND:
 00000109  48/ FF CB			dec rbx	; ix--
 0000010C  7D 8C			jge LOOPX	; ix >= 0
 0000010E			LOOPYEND:
 0000010E  49/ 2B F9			sub rdi, r9 ; ixdimp*4
 00000111  48/ FF CA			dec rdx	; iy--
 00000114  49/ 3B D4			cmp rdx, r12
 00000117  0F 8D FFFFFF65		jge LOOPY	; iy >= iy0

 0000011D			RTN:
				;	ldmxcsr smxcsr
 0000011D  41/ 5D			pop r13
 0000011F  41/ 5C			pop r12
 00000121  5F				pop rdi
 00000122  5E				pop rsi
 00000123  5D				pop rbp
 00000124  5B				pop rbx
 00000125  C3				ret

 00000126			USEAVX:
				;load valiables	
 00000126  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000129  C4 E2 7D/ 18 00		vbroadcastss ymm0, real4 ptr [rax]
 0000012E  4C/ 8B 46 08			mov r8, [rsi + 8]	; &fsin
 00000132  4C/ 8B 5E 10			mov r11, [rsi + 16]	; &foffset

 00000136  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 0000013A  C4 E1 CA/ 2A F1		vcvtsi2ss xmm6, xmm6, rcx	; xmm6<==ixdimpg
 0000013F  C4 E2 7D/ 18 F6		vbroadcastss ymm6, xmm6	; ymm6<==ixdimpg, ixdimpg, ixdimpg, ixdimpg
 00000144  C4 C1 F2/ 2A CA		vcvtsi2ss xmm1, xmm1, r10	; xmm1<==ixdimp
 00000149  C4 E2 7D/ 18 C9		vbroadcastss ymm1, xmm1	; ymm1<==ixdimp, ixdimp, ixdimp, ixdimp
					
 0000014E  49/ 8B C4			mov rax, r12; iy = iy0
 00000151  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000154  48/ F7 E9			imul rcx
 00000157  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * iy0 * 4
 0000015B  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 0000015F  48/ 8B F8			mov rdi, rax
				;	mov rdi, [rsi + 40]	; ifp
 00000162  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000166  49/ 8B D4			mov rdx, r12	; iy<==iy0
 00000169			ALOOPY:
 00000169  48/ C7 C3			mov rbx, 0	; ix<==0
	   00000000
 00000170  C5 FC/ 28 15			vmovaps ymm2, F76543210	; reset ix
	   00000000 R
 00000178  C4 E1 E2/ 2A DA		vcvtsi2ss xmm3, xmm3, rdx	; xmm3<==iy
 0000017D  C4 E2 7D/ 18 DB		vbroadcastss ymm3, xmm3	; xmm3<==iy, iy, iy, iy
 00000182  C4 C2 7D/ 18 28		vbroadcastss ymm5, real4 ptr [r8]
 00000187  C5 D4/ 59 EB			vmulps ymm5, ymm5, ymm3	; iy * fsin for each float
 0000018B  C4 C2 7D/ 18 3B		vbroadcastss ymm7, real4 ptr [r11]	; ymm7<==foffset
 00000190  C5 D4/ 58 EF			vaddps ymm5, ymm5, ymm7	; ymm5<==iy * fsin + foffset
 00000194			ALOOPX:
 00000194  C5 FC/ 59 E2			vmulps ymm4, ymm0, ymm2	; (ix+n) * fcos
 00000198  C5 DC/ 58 E5			vaddps ymm4, ymm4, ymm5	; (ix+n) * fcos + foffset
 0000019C  C5 DC/ C2 FE 01		vcmpltps ymm7, ymm4, ymm6	; ymm7[i:i]=1 if (ymm4 < ixdimpg)
 000001A1  C5 DC/ C2 1D			vcmpgeps ymm3, ymm4, F00000000	; ymm3[i:i]=1 if (ymm4 >= 0)
	   00000040 R 0D
 000001AA  C5 C5/ DB FB			vpand ymm7, ymm7, ymm3
 000001AE  C5 E5/ EF DB			vpxor ymm3, ymm3, ymm3	; clear ymm3
 000001B2  C5 FE/ 5B E4			vcvttps2dq ymm4, ymm4	; ymm4 float*8 to integer32*8
 000001B6  C4 E2 45/ 90 1C		vpgatherdd ymm3, [rsi + ymm4 * 4], ymm7	; load [rsi+ymm4*4] if ymm7=1
	   A6
 000001BC  C5 EC/ C2 F9 01		vcmpltps ymm7, ymm2, ymm1	; ymm7[i:i]=1 if (ymm2 < ixdimp)
 000001C1  C4 E2 45/ 8C 24		vpmaskmovd ymm4, ymm7, [rdi + rbx * 4]
	   9F
 000001C7  C5 E5/ FE E4			vpaddd ymm4, ymm3, ymm4
 000001CB  C4 E2 45/ 8E 24		vpmaskmovd [rdi + rbx * 4], ymm7, ymm4
	   9F

 000001D1  C5 EC/ 58 15			vaddps ymm2, ymm2, F88888888	; ymm2 + 8.0
	   00000020 R
 000001D9  48/ 83 C3 08			add rbx, 8
 000001DD  49/ 3B DA			cmp rbx, r10
 000001E0  72 B2			jnae ALOOPX	; ix < ixdimp
 000001E2			ALOOPYEND2:
 000001E2  49/ 03 F9			add rdi, r9 ; +ixdimp*4
 000001E5  48/ FF C2			inc rdx	; iy++
 000001E8  49/ 3B D5			cmp rdx, r13
 000001EB  0F 82 FFFFFF78		jnae ALOOPY	; iy < iy1

				;	ldmxcsr smxcsr
 000001F1  41/ 5D			pop r13
 000001F3  41/ 5C			pop r12
 000001F5  5F				pop rdi
 000001F6  5E				pop rsi
 000001F7  5D				pop rbp
 000001F8  5B				pop rbx
 000001F9  C3				ret

 000001FA			projx64 ENDP

				end
Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   01/20/19 14:04:09
projx64.asm						     Symbols 2 - 1




Segments:

                N a m e                  Length   Align   Class

DATA . . . . . . . . . . . . . .	 00000070 32	  


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

projx64  . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 000001FA Public
  LOOPY  . . . . . . . . . . . .	L 	 00000082 _TEXT	
  LOOPX  . . . . . . . . . . . .	L 	 0000009A _TEXT	
  LOOPXSKIP1 . . . . . . . . . .	L 	 000000C1 _TEXT	
  LOOPXSKIP2 . . . . . . . . . .	L 	 000000D9 _TEXT	
  LOOPXSKIP3 . . . . . . . . . .	L 	 000000F1 _TEXT	
  LOOPXEND . . . . . . . . . . .	L 	 00000109 _TEXT	
  LOOPYEND . . . . . . . . . . .	L 	 0000010E _TEXT	
  RTN  . . . . . . . . . . . . .	L 	 0000011D _TEXT	
  USEAVX . . . . . . . . . . . .	L 	 00000126 _TEXT	
  ALOOPY . . . . . . . . . . . .	L 	 00000169 _TEXT	
  ALOOPX . . . . . . . . . . . .	L 	 00000194 _TEXT	
  ALOOPYEND2 . . . . . . . . . .	L 	 000001E2 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

F00000000  . . . . . . . . . . .	DWord	 00000040 DATA	
F3210  . . . . . . . . . . . . .	DWord	 00000060 DATA	
F76543210  . . . . . . . . . . .	DWord	 00000000 DATA	
F88888888  . . . . . . . . . . .	DWord	 00000020 DATA	
WIN_X64  . . . . . . . . . . . .	Text   	 

	   0 Warnings
	   0 Errors
